plugins {
	id "groovy"
	id "idea"
	id "com.energizedwork.idea-project-components" version "1.2"
	id "com.energizedwork.idea-base" version "1.2"
	id "com.energizedwork.webdriver-binaries" version "1.4"
    id "maven"
}

group = 'jumio.oss'
version = '1.0-SNAPSHOT'

ext {
	groovyVersion = '2.4.12'
	gebVersion = '2.2'
	seleniumVersion = '3.13.0'//'3.2.0'
	cucumberJvmVersion = '1.2.2'
	chromeDriverVersion = '2.42'
	geckoDriverVersion = '0.18.0'

    spockVersion = '1.0-groovy-2.4'
    appiumClientVersion = '5.0.4'
    iosClientVersion = '0.6+'
}

allprojects {
    apply plugin: 'idea'

    repositories {
        mavenLocal()
        mavenCentral()
    }

}

subprojects {
    apply plugin: 'groovy'
    

    dependencies {

        compile("io.appium:java-client:$appiumClientVersion")

        compile "org.uiautomation:ios-client:$iosClientVersion"
        compile "org.json:json:20171018"
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        compile "org.slf4j:slf4j-api:1.7.6"
        compile 'ch.qos.logback:logback-classic:1.1.2'
        //compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"

        compile group: 'junit', name: 'junit', version: '4.11'
        compile("org.gebish:geb-spock:$gebVersion") {
            exclude module: "groovy"
            exclude module: "groovy-all"
        }
        compile("org.spockframework:spock-core:$spockVersion") {
            exclude module: "junit"
            exclude module: "groovy"
            exclude module: "groovy-all"
        }
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }


}

repositories {
	mavenCentral()
}

dependencies {
    compile project(':impl')
    compile project(':core')
    compile project(':testrail-sync')
	compile project(':testrail-result')

	compile "org.codehaus.groovy:groovy-all:$groovyVersion"
	compile  "info.cukes:cucumber-core:$cucumberJvmVersion"
	compile "info.cukes:cucumber-groovy:$cucumberJvmVersion"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    //compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
    //compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '2.23.0'
    //compile group: 'org.seleniumhq.selenium', name: 'selenium-edge-driver', version: '2.47.1'
    //compile group: 'org.seleniumhq.selenium', name: 'selenium-ie-driver', version: '3.141.59'
    //compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
}

configurations {
    cucumberRuntime {
        extendsFrom runtime
    }
}



/**
 *  Tasks
 */

task cucumber() {


    dependsOn assemble, compileJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output

            systemProperty "cucumber.options", System.getProperty("cucumber.options")

            systemProperty "app", System.getProperty("app")

            systemProperty "env", System.getProperty("env")

            systemProperty "browser", System.getProperty("browser")

            // Add '--glue' to step definitions and other scripts that should be included in the cucumber runtime.
            // Arguments without '--glue' should be only the feature files
            args = ['--plugin',

                    // stdout output to the console
                    'pretty',

                    // json report
                    '--plugin', 'json:build/reports/results.json',

                    // junit report
                    '--plugin', 'junit:build/reports/junit-results.xml',

                    // main script
                   // '--glue', 'impl/src/main/groovy/zenjob/testautomation/env',

                    // step definitions
                    '--glue', 'impl/src/main/groovy/framework/src/Steps/BaseSteps.groovy',
                    '--glue', 'impl/src/main/groovy/framework/src/Steps/CommonSteps.groovy',

                    '--glue', 'impl/src/main/groovy/framework/src/Steps/ZVS',

                    // orchestration classes for dependency injection
                    '--glue', 'core/src/main/groovy/zenjob/testautomation/orchestration',

                    // feature files
                    'impl/src/main/groovy/framework/src/Features/ZVS',

                    // tags to run only specific scenarios
//                    '--tags', '@smoke', '@regression'
            ]
        }
    }
}



task cucumber333() {


    dependsOn assemble, compileJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output

            systemProperty "cucumber.options", System.getProperty("cucumber.options")

            systemProperty "app", System.getProperty("app")

            systemProperty "env", System.getProperty("env")

            systemProperty "browser", System.getProperty("browser")

            // Add '--glue' to step definitions and other scripts that should be included in the cucumber runtime.
            // Arguments without '--glue' should be only the feature files
            args = ['--plugin',

                    // stdout output to the console
                    'pretty',

                    // json report
                    '--plugin', 'json:build/reports/results.json',

                    // junit report
                    '--plugin', 'junit:build/reports/junit-results.xml',

                    // main script
                    //'--glue', 'impl/src/main/groovy/zenjob/testautomation/env',

                    // step definitions
                    '--glue', 'impl/src/main/groovy/framework/src/Steps',

                    // orchestration classes for dependency injection
//                    '--glue', 'impl/src/main/groovy/framework/src/orchestration',

                    // feature files
                    'impl/src/main/groovy/framework/src/Features',
                    //'impl/src/main/groovy/framework/src/Features/CompanyApp',

                    // tags to run only specific scenarios
//                    '--tags', '@smoke', '@regression'
            ]
        }
    }
}

task synchronizeWithTestRail (dependsOn: 'classes', type: JavaExec) {
    main = 'zenjob.testautomation.scripts.synchronizeWithTestRail'
    classpath = sourceSets.main.runtimeClasspath
    println sourceSets.main.runtimeClasspath
}

task pushResultsToTestRail (dependsOn: 'classes', type: JavaExec) {
    main = 'zenjob.testautomation.scripts.pushResultsToTestRail'
    classpath = sourceSets.main.runtimeClasspath
    println sourceSets.main.runtimeClasspath

    systemProperty "runId", System.getProperty("runId")
}

task checkenv {
    doLast {
        if (System.properties.'os.name'.toLowerCase().startsWith("mac")) {
            println "MAC ... "
            println "check appium installation: " + 'appium -v'.execute().text

        }
    }
}
